table(iris2[101:150,5],p1)
s <- sample(150,100)
s
samp <- sample(nrow(iris))
samp
train <- iris[samp, ]
test <- iris[-samp, ]
iris
View(iris)
View(train)
View(test)
View(test)
samp <- sample(nrow(iris[1:99,])
samp
s <- sample(150,50)
s
train <- iris[-samp, ]
train <- iris[-s, ]
test <- iris[s, ]
View(test)
random <- runif(nrow(iris))
train <- iris[random,]
random
train
View(train)
train <- iris[order(random),]
rm(train)
iris_random <- iris[order(random),]
View(iris_random)
train <- iris_random[1:99,]
test <- iris_random[100:150, ]
View(train)
library(rpart)
rpart(Species ~.,
train,
method = 'class')
library(rpart.plot)
model <- rpart(Species ~.,
train,
method = 'class')
rpart.plot(model)
table(test, model)
?predict
p1 <- predict(Species ~.,
test,
type = 'class')
p1 <- predict(model,
test,
type = 'class')
table(test, p1)
table(test[,5], p1)
plot(iris)
pairs(iris)
pairs(iris)
library(psych)
install.packages("psych")
library(psych)
pairs.panels(iris)
plot(iris$Petal.Length, iris$Species, col = iris$Species)
plot(iris$Petal.Length, iris$Petal.Width, col = iris$Species)
pairs.panels(iris)
plot(iris$Petal.Width, iris$Petal.Length, col = iris$Species)
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species)
s <- sample(150,100)
col <- c('Petal.Length', 'Petal.Width', 'Species')
train <- iris[s, col]
test <- iris[-s, col]
install.packages("e1071")
library(e1071)
?svm
svm_model <- svm(x = train, y = Species,  kernel = 'linear', scale = FALSE)
View(test)
svm_model <- svm(x = train, y = train$Species,  kernel = 'linear', scale = FALSE)
svm_model <- svm(x = train, y = Species ~.,  kernel = 'linear', scale = FALSE)
svm_model <- svm(train, y = Species ~.,  kernel = 'linear', scale = FALSE)
svm_model <- svm(train, Species ~.,  kernel = 'linear', scale = FALSE)
svm_model <- svm(Species ~.,  train, kernel = 'linear', scale = FALSE)
p1 <- predict(Species ~., svm_model, type = 'class')
p1 <- predict(svm_model, test,  type = 'class')
table(test[,3], p1)
svm_model <- svm(Species ~., train, scale = F, kernel = 'linear', cost = 100)
p1 <- predict(svm_model, test, type = 'class')
table(svm_model, p1)
table(test[,3], p1)
svm_model <- svm(Species ~., train, scale = F, kernel = 'linear', cost = 1000)
p1 <- predict(svm_model, test, type = 'class')
table(test[,3], p1)
svm_model <- svm(Species ~., train, scale = F, kernel = 'linear', cost = 0.1)
p1 <- predict(svm_model, test, type = 'class')
table(test[,3], p1)
svm_model <- svm(Species ~., train, scale = F, kernel = 'linear', cost = 10000)
p1 <- predict(svm_model, test, type = 'class')
table(test[,3], p1)
print(svm_model)
svm_model <- svm(Species ~.,  train, kernel = 'linear', scale = FALSE)
print(svm_model)
plot(svm_model)
plot(svm_model, train[,3])
plot(svm_model, train)
svm_model <- svm(Species ~.,  train, kernel = 'linear', scale = FALSE)
plot(svm_model, train)
svm_model <- svm(Species ~., train, scale = F, kernel = 'linear')
tuned <- tune(svm, Species ~., train, scale = F, kernel = 'linear',
ranges = list(cost = c(0.001,0.01,0.1,1,10,100)))
tuned <- tune(svm, Species ~., train, kernel = 'linear',
ranges = list(cost = c(0.001,0.01,0.1,1,10,100)))
tuned <- tune(svm, Species ~., data = train, kernel = 'linear',
ranges = list(cost = c(0.001,0.01,0.1,1,10,100)))
print(svm_model)
plot(svm_model, train)
svm_model <- svm(Species ~.,  train, kernel = 'linear', scale = FALSE)
print(svm_model)
plot(svm_model, train)
svm_model <- svm(Species ~., train, scale = F, kernel = 'linear')
tuned <- tune(svm, Species ~., data = train, kernel = 'linear',
ranges = list(cost = c(0.001,0.01,0.1,1,10,100)))
summary(tuned)
plot(svm_model, train)
p1 <- predict(svm_model, test, type = 'class')
table(test[,3], p1)
svm_model <- svm(Species ~., data = train, kernel = 'linear', scale = FALSE)
print(svm_model)
plot(svm_model, train)
p1 <- predict(svm_model, data = test,  type = 'class')
table(test[,3], p1)
p1 <- predict(svm_model, test,  type = 'class')
table(test[,3], p1)
p1 <- predict(svm_model, data = test,  type = 'class')
table(test[,3], p1)
table(test, p1)
table(test[,3], p1)
p1 <- predict(svm_model, test,  type = 'class')
table(test[,3], p1)
tuned <- tune(svm, Species ~., data = train, kernel = 'linear',
ranges = list(cost = c(0.001,0.01,0.1,1,10,100)))
summary(tuned)
print(svm_model)
table(test[,3], p1)
svm_model <- svm(Species ~., data = train, kernel = 'linear', scale = F, cost = 0.1)
p1 <- predict(svm_model, test, type = 'class')
table(test[,3], p1)
print(svm_model)
plot(svm_model, train)
?svm
dim(train)
gamma(train)
ncol(train)
1/ncol(train)
tuned <- tune(svm, Species ~., data = train, kernel = 'sigmoid', scale = F,
ranges = list(gamma = c(0.333, 0.555, 0.777, 0.999, 1)))
summary(tuned)
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'sigmoid',
gamma = 0.999, cost = 0.1)
print(svm_model)
plot(svm_model, train)
p1 <- predict(svm_model, test, type = 'class')
table(svm_model, p1)
table(test[,3], p1)
table(p1, test[,3])
?svm
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'radial.basis',
gamma = 0.999, cost = 0.1)
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'radial basis',
gamma = 0.999, cost = 0.1)
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'radial-basis',
gamma = 0.999, cost = 0.1)
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'polynomial',
gamma = 0.999, cost = 0.1)
print(svm_model)
plot(svm_model, train)
p1 <- predict(svm_model, test, type = 'class')
table(p1, test[,3])
tuned <- tune(svm, Species ~., data = train, kernel = 'polynomial', scale = F,
ranges = list(gamma = c(0.333, 0.555, 0.777, 0.999, 1)))
summary(tuned)
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'polynomial',
gamma = 0.333, cost = 0.1)
print(svm_model)
plot(svm_model, train)
p1 <- predict(svm_model, test, type = 'class')
table(p1, test[,3])
tuned <- tune(svm, Species ~., data = train, kernel = 'polynomial', scale = F,
ranges = list(gamma = c(0.333, 0.555, 0.777, 0.999, 1)),
ranges = list(cost = c(0.001,0.01,0.1,1,10,100,1000)))
tuned <- tune(svm, Species ~., data = train, kernel = 'polynomial', scale = F,
ranges = list(cost = c(0.001,0.01,0.1,1,10,100,1000)))
summary(tuned)
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'polynomial',
gamma = 0.333, cost = 1)
print(svm_model)
plot(svm_model, train)
tuned <- tune(svm, Species ~., data = train, kernel = 'polynomial', scale = F,
ranges = list(gamma = c(0.333, 0.555, 0.777, 0.999, 1)))
summary(tuned)
svm_model <- svm(Species ~., data = train, scale = F, kernel = 'polynomial',
gamma = 0.333, cost = 0.1)
print(svm_model)
plot(svm_model, train)
table(p1, test[,3])
getwd()
setwd("C:/Users/abhi/Downloads/Jobs/New Job/R/2.codes")
getwd()
data(pollution)
library(EDAWR)
data("pollution")
library(dplyr)
glimpse(pollution)
tbl_df(pollution)
data(tb)
tbl_df(tb)
count(tb %>% distinct(country))
count(tb %>% distinct(year))
count(tb %>% distinct(year))
tb %>% group_by(country, year)
tb %>% mutate(Total = child+adult+elderly)
rm(tb)
tb[is.na(tb),] <- 0
tb[is.na(tb)] <- 0
tbl_df(tb)
tb %>% mutate(Total = child+adult+elderly)
is.na(tb)
sum(is.na(tb))
tbl_df(tb)
tb %>% mutate(Total = child+adult+elderly)
tbl_df(tb)
tb <- tb %>% mutate(Total = child+adult+elderly)
sum(is.na(tb))
tbl_df(tb)
tb <- tb[,-7]
tbl_df(tb)
tb %>% group_by(country, year) %>% summarise(Total = sum(child+adult+elderly))
tbl_df(tb)
tb %>% group_by(country, year) %>% summarise(Total = sum(child+adult+elderly)) %>% summarise(Total = sum(child+adult+elderly))
tb %>% group_by(country, year) %>% summarise(Total = sum(child+adult+elderly)) %>% summarise(Total = sum(child+adult+elderly))
tb %>% group_by(country, year) %>% summarise(Total = sum(child+adult+elderly)) %>%
summarise(count = sum(count))
tbl_df(tb)
tb %>% mutate(indexes = seq.int(from = 1, to = 200))
class(tb)
nrow(tb)
tb %>% mutate(indexes = seq.int(from = 1, to = 3800))
tail(tb)
tb <- tb %>% mutate(indexes = seq.int(from = 1, to = 3800))
head(tb)
tail(tb)
tb %>% group_by(country, year) %>% summarise(Total = sum(child+adult+elderly))
tb %>% group_by(country, year) %>% summarise(Total = sum(child+adult+elderly))
%>% summarise(indexes.sum = sum(indexes))
tb %>% group_by(country, year)%>% summarise(indexes.sum = sum(indexes))
head(tb)
tb %>% group_by(country, year)%>% summarise(indexes.sum = sum(indexes)) %>%
summarise(indexes.sum = sum(indexes))
tbl_df(tb)
?seq.int
nrow(tb[country=='Afghanistan'])
nrow(tb[country=='Afghanistan',])
apply(tb, 1, nrow(country=='Afghanistan'))
nrow(tb[tb$country=='Afghanistan',])
unique(tb$country)
nrow(tb[tb$country=='Algeria',])
nrow(tb[tb$country=='Angola',])
apply(tb, 1, nrow(tb$country=='Afghanistan'))
a<- unique(tb$country)
a
RM(a)
rm(a)
head(tb)
a <- tb[, tb$year]
a <- tb[, year]
a <- tb[,2]
a
a <- tb
a
a <- a[,-c(1,3)]
a
a %>% group_by(year)
a %>% group_by(year) %>% summarise(Total.Indexes = sum(indexes))
sum(seq.int(from =1, to=3800))
rm(a)
tbl_df(pollution)
pollution %>% group_by(city)
pollution %>% group_by(city) %>% summarise(sum.amount = sum(amount))
a <- unique(pollution$city)
a
class(a)
a <- as.data.frame(a)
a
?cbind
rm(a)
rm(pollution)
tb %>% group_by(country, year)%>% summarise(indexes.sum = sum(indexes)) %>%
summarise(indexes.sum = sum(indexes))
tbl_df(tb)
tb %>% group_by(country, year)%>% summarise(indexes.sum = sum(indexes))
data(iris)
str(iris)
?subset
iris.subset <- subset(iris, select = -c('Species'))
iris.subset <- subset(iris, select = -c(Species))
iris.subset
count(iris.subset %>% distinct(iris.subset))
head(iris.subset)
iris.subset <- subset(iris, select = -5)
head(iris.subset)
tail(iris.subset)
install.packages("missForest")
library(missForest)
rm(iris.subset)
iris.miss <- prodNA(iris, noNA = 0.1)
tbl_df( iris.miss)
sum(is.na(iris.miss))
iris.miss[iris.miss$Sepal.Length==NA]
iris.miss[iris.miss$Sepal.Length==NA,]
length(unique(iris.miss$Sepal.Length))
length(iris.miss$Sepal.Length==NA)
length(is.na(iris.miss$Sepal.Length))
count(is.na(iris.miss$Sepal.Length))
count(iris.miss %>% is.na(Sepal.Length))
is.na(iris.miss$Sepal.Length)
length(is.na(iris.miss$Sepal.Length))
count(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss))
sum(is.na(iris.miss$Petal.Length))
sum(is.na(iris.miss))
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Petal.Width))
sum(is.na(iris.miss$Sepal.Width))
sum(is.na(iris.miss$Petal.Length))
a <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width))+
sum(is.na(iris.miss$Sepal.Width)) +
sum(is.na(iris.miss$Petal.Length))
a
a <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width))+
sum(is.na(iris.miss$Sepal.Width)) +
sum(is.na(iris.miss$Species))
sum(is.na(iris.miss$Species))
iris.miss
rm(a)
iris.subset <- subset(iris)
anti_join(iris, iris.subset)
semi_join(iris, iris.subset)
iris.subset
iris.subset <- subset(iris, -5)
iris.subset <- subset(iris, select = -5)
iris.subset
anti_join(iris, iris.subset) #returns unmatched rows from x
semi_join(iris, iris.subset) #returns matching rows of y from x
rm(iris.miss)
getwd()
count(iris.subset %>% distinct(iris.subset))
iris.miss <- prodNA(iris, noNA = 0.1) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss))
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width))
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Petal.Width))
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Petal.Width))
sum(is.na(iris.miss$Species))
sum(is.na(iris.miss))
iris.miss <- prodNA(iris, noNA = 0.1) #noNA = percentage of NA's to be produced
sum(is.na(iris.miss))
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs
iris.miss <- prodNA(iris, noNA = 0.1) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
iris.miss <- prodNA(iris, noNA = 0.1) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
iris.miss <- prodNA(iris, noNA = 0.1) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
iris.miss <- prodNA(iris, noNA = 0.2) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
iris.miss <- prodNA(iris, noNA = 0.2) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
iris.miss <- prodNA(iris, noNA = 0.2) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
iris.miss <- prodNA(iris, noNA = 0.3) #noNA = percentage of NA's to be produced
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
str(iris.miss)
iris.subset <- subset(iris.miss, select = -5)
iris.subset
sum(is.na(iris.subset))
sum(is.na(iris.miss))
sum(is.na(iris.miss$Species))
sum(is.na(iris.miss))-
sum(is.na(iris.miss$Species))
install.packages("mice")
library(mice)
install.packages("mice")
library(mice)
mice::md.pattern(iris.subset)
md.pattern(iris.subset)
?md.pattern
is.na(iris.miss$Sepal.Length)
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Sepal.Width))
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Petal.Width))
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Petal.Width))
sum(is.na(iris.miss$Species))
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
md.pattern(iris.subset)
head(iris.subset)
getwd()
data(iris)
library(missForest)
iris.subset <- subset(iris, select = -5)
iris.subset
rm(iris.subset)
iris.miss <- prodNA(iris, noNA = 0.1) #noNA = percentage of NA's to be produced
tbl_df(iris.subset)
tbl_df(iris.miss)
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note NA's may/maynot match
sum(is.na(iris.miss$Species))
sum(is.na(iris.miss$Petal.Width))
sum(is.na(iris.miss$Sepal.Length))
sum(is.na(iris.miss$Petal.Width))
sum(is.na(iris.miss$Sepal.Length))
Total.NAs <- sum(is.na(iris.miss$Petal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note sum of individual variable's NA's may/maynot match with total NA's
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
iris.miss <- prodNA(iris, noNA = 0.1) #noNA = percentage of NA's to be produced
sum(is.na(iris.miss)) #NA's in the 'iris.miss' dataset
Total.NAs <- sum(is.na(iris.miss$Petal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Sepal.Length)) +
sum(is.na(iris.miss$Petal.Width)) +
sum(is.na(iris.miss$Species))
Total.NAs #note sum of individual variable's NA's may/maynot match with total NA's
