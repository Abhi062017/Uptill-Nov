version
sessionInfo()
version()
version
swirl()
library(swirl)
hi
swirl()
bye()
swirl()
swirl()
getwd()
setwd("C:/Users/Abhishek/Downloads/Jobs/New Job/2.codes/Nov")
library(ISLR)
library(ILSR)
install.packages("ISLR", dependencies = T)
library(ISLR)
data("Smarket")
str(Smarket)
summary(Smarket)
head(Smarket)
tail(Smarket)
table(Smarket$Direction)
cor(Smarket[,-9])
a<- cor(Smarket[,-9])
sapply(a, class)
class(a)
a
View(a)
a<- !upper.tri(a, diag = F)
View(a)
a<- cor(Smarket[,-9])
View(a)
!lower.tri(a, diag = T) <- 0
lower.tri(a, diag = T) <- 0
View(a)
View(a)
a[!lower.tri(a, diag = T)] <- 0
View(a)
a[!lower.tri(a, diag = F)] <- 0
View(a)
rm(a
rm(a)
rm(a)
Corr_Matrix<- cor(Smarket[,-9]) #as 'Direction' is not a target variable
sapply(Corr_Matrix, class)
View(Corr_Matrix)
sapply(Corr_Matrix, class) #spits out class of each value of Corr_Matrix
Corr_Matrix[!lower.tri(Corr_Matrix, diag = F)] <- 0 #spits out just the required cor
View(Corr_Matrix)
View(Corr_Matrix)
library(psych)
pairs.panels(Corr_Matrix)
plot(Corr_Matrix)
warnings()
pairs.panels(Corr_Matrix, col = rainbow(8))
pairs.panels(Smarket[,-9])
plot(Smarket)
plot(Smarket[,-c(8,9)])
pairs.panels(Smarket[,-c(8,9])
pairs.panels(Smarket[,-c(8,9)]
pairs.panels(Smarket[,-c(8,9)])
pairs.panels(Smarket[,-c(8,9)])
Smarket$Today
duplicated(Smarket$Today)
sum(duplicated(Smarket$Today))
table(duplicated(Smarket$Today))
View(Smarket$Today)
View(Smarket$Lag5)
plot(Smarket[,-c(9)]) #as 'Direction' is a factor with 2 values.
pairs.panels(Smarket[,-c(8,9)])
pairs.panels(Smarket[,-c(9)])
#splitting data
table(Smarket$Year)
nrow(Smarket$Year==2001)
nrow(Smarket[Smarket$Year==2001])
length(Smarket[Smarket$Year==2001])
length(Smarket$Year==2001)
242+252+252+252+252
prop.table(Smarket$Year)
prop.table(table(Smarket$Year))
table(Smarket$Year)
Smarket[Smarket$Year < 2005]
Smarket[Smarket$Year < 2005]
Smarket[Smarket$Year < 2005,]
nrow(Smarket[Smarket$Year < 2005,])
nrow(!Smarket[Smarket$Year < 2005,])
nrow(Smarket[!Smarket$Year < 2005,])
998+252
nrow(Smarket[Smarket$Year < 2005,])
998/1250
training <- Smarket[Smarket$Year < 2005]
training <- Smarket[Smarket$Year < 2005,]
rm(training)
train <- Smarket[Smarket$Year < 2005,]
test <- !train
test <- !train[,]
test <- Smarket[!train,]
test <- Smarket[!train]
test <- Smarket[!Smarket$Year < 2005,]
class(test)
View(test)
#Approach 2:
library(caret)
index <- createDataPartition(y = Smarket, times = 1, p = 0.80, list = F)
index <- createDataPartition(y = Smarket$Direction, times = 1, p = 0.80, list = F)
train <- Smarket[index, ]
test <- Smarket[-index, ]
?createMultiFolds
?train
cv.folds <- createMultiFolds(y=train$Direction, k=10, times=5)
class(cv.folds)
cv.folds
?trainControl
cv.cntrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 5,
index = cv.folds)
library(doSNOW)
?makeCluster
I <- 10:10000
I
class(I)
head(I)
I <- seq(10:10000)
head(I)
tail(I)
I <- 10:10000
head(I)
tail(I)
class(I)
rm(I)
cl <- makeCluster(3, type = 'SOCK')
cl
View(cl)
registerDoSNOW(cl)
glm.cv.1 <- train(Direction ~ .,
data = train,
method = 'glm',
trControl = cv.cntrl,
tuneLength = 7)
stopCluster(cl)
glm.cv.1
nrow(train)
predict()
predict
?predict()
pred <- predict(glm.cv.1, test, type = 'response')
?train
#Step5: predict
pred <- predict(glm.cv.1, test, type = 'prob')
confusionMatrix(pred, test$Direction)
test$Direction
getwd()
data("Smarket")
str(Smarket) #note: 'Direction' is our response variable
tail(Smarket)
table(Smarket$Direction)#spits out the weightage of each of the values.
?ifelse()
Smarket$Direction <- ifelse(Smarket$Direction =='Up', 1, 0)
tail(Smarket)
Corr_Matrix<- cor(Smarket[,-9]) #as 'Direction' is not a target variable
View(Corr_Matrix)
sapply(Corr_Matrix, class) #spits out class of each value of Corr_Matrix
Corr_Matrix[!lower.tri(Corr_Matrix, diag = F)] <- 0 #spits out just the required cor
View(Corr_Matrix) ##Deduction: Highly uncorrelated variables
pairs.panels(Smarket[, -9])
table(Smarket$Year)
prop.table(table(Smarket$Year)) #we'll split by Year
nrow(Smarket[Smarket$Year < 2005,]) #80% of total data
index <- createDataPartition(y = Smarket$Direction, times = 1, p = 0.80, list = F)
View(index)
train <- Smarket[index, ]
test <- Smarket[-index, ]
table(train$Direction, test$Direction)
table(train$Direction)
table(test$Direction)
prop.table(train, test)
1000/1250
cv.folds <- createMultiFolds(y=train$Direction, k=10, times=5)
cv.cntrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 5,
index = cv.folds)
cl <- makeCluster(3, type = 'SOCK')
registerDoSNOW(cl)
glm.cv.1 <- train(Direction ~ .,
data = train,
method = 'glm',
trControl = cv.cntrl,
tuneLength = 7)
stopCluster(cl)
glm.cv.1
#Step5: predict
pred <- predict(glm.cv.1, test, type = 'response')
#Step5: predict
pred <- predict(glm.cv.1, test, type = 'prob')
pred <- predict(glm.cv.1, test, type = 'prob')
glm.cv.1 <- train(Direction ~ .,
data = train,
method = 'rf',
trControl = cv.cntrl,
tuneLength = 7)
stopCluster(cl)
str(Smarket) #note: 'Direction' is our response variable
Smarket$Direction <- as.factor(Smarket$Direction) #casting back as factor
glm.cv.1 <- train(Direction ~ .,
data = train,
method = 'glm',
trControl = cv.cntrl,
tuneLength = 7)
stopCluster(cl)
str(Smarket) #note: 'Direction' is our response variable
Corr_Matrix<- cor(Smarket[,-9]) #as 'Direction' is not a target variable
data("Smarket")
getwd()
str(Smarket) #note: 'Direction' is our response variable
tail(Smarket)
table(Smarket$Direction)#spits out the weightage of each of the values.
Smarket$Direction <- ifelse(Smarket$Direction =='Up', 1, 0)
Smarket$Direction <- as.factor(Smarket$Direction) #casting back as factor
str(Smarket)
Corr_Matrix<- cor(Smarket[,-9]) #as 'Direction' is not a target variable
View(Corr_Matrix)
sapply(Corr_Matrix, class) #spits out class of each value of Corr_Matrix
Corr_Matrix[!lower.tri(Corr_Matrix, diag = F)] <- 0 #spits out just the required cor
View(Corr_Matrix) ##Deduction: Highly uncorrelated variables
pairs.panels(Smarket[, -9])
table(Smarket$Year)
prop.table(table(Smarket$Year)) #we'll split by Year
library(caret)
index <- createDataPartition(y = Smarket$Direction, times = 1, p = 0.80, list = F)
train <- Smarket[index, ]
test <- Smarket[-index, ]
cv.folds <- createMultiFolds(y=train$Direction, k=10, times=5)
cv.cntrl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 5,
index = cv.folds)
cl <- makeCluster(3, type = 'SOCK')
registerDoSNOW(cl)
glm.cv.1 <- train(Direction ~ .,
data = train,
method = 'glm',
trControl = cv.cntrl,
tuneLength = 7)
stopCluster(cl)
glm.cv.1
#Step5: predict
pred <- predict(glm.cv.1, test, type = 'response')
#Step5: predict
pred <- predict(glm.cv.1, test, type = 'prob')
confusionMatrix(pred, test$Direction)
pred <- predict(glm.cv.1, test)
confusionMatrix(pred, test$Direction)
rpart.cv.1 <- train(Direction ~ .,
data = train,
method = 'rpart',
trControl = cv.cntrl,
tuneLength = 7)
rf.cv.1 <- train(Direction ~ .,
data = train,
method = 'rf',
trControl = cv.cntrl,
tuneLength = 7)
glm.cv.1 <- train(Direction ~ .,
data = train,
method = 'rpart',
trControl = cv.cntrl,
tuneLength = 7)
glm.cv.1 <- train(Direction ~ .,
data = train,
method = 'rpart',
trControl = cv.cntrl,
tuneLength = 7)
confusionMatrix(pred, test$Direction) #99.2% accuracy
